/* Separator auto-generated by npm run generator */
import { Theme, makeStyles } from "@material-ui/core"
import clsx from "clsx"
import React, { CSSProperties } from "react"

interface SeparatorProps {
    className?: string
    style?: CSSProperties
    children?: React.ReactNode

    vertical?: boolean
    spacing?: number
    color?: "primary" | "secondary" | "danger"
    hideBar?: boolean
}

const useStyles = makeStyles((theme: Theme) => ({
    separatorAtom: {
        height: 1,
        minHeight: 1,
        maxHeight: 1,
        width: "100%",
        border: "solid 1px"
    },
    separatorAtomVertical: {
        width: 1,
        minWidth: 1,
        maxWidth: 1,
        height: "100%",
        border: "solid 1px"
    },
    black: {
        borderColor: theme.palette.common.black
    },
    primary: {
        borderColor: theme.palette.primary.main
    },
    secondary: {
        borderColor: theme.palette.secondary.main
    },
    danger: {
        borderColor: theme.palette.error.main
    }
}))

export const Separator: React.FC<SeparatorProps> = props => {
    const classes = useStyles()

    let borderColorClass = classes.black
    if (props.color === "primary") {
        borderColorClass = classes.primary
    } else if (props.color === "secondary") {
        borderColorClass = classes.secondary
    } else if (props.color === "danger") {
        borderColorClass = classes.danger
    }

    const className = clsx(props.vertical ? classes.separatorAtomVertical : classes.separatorAtom, props.className, borderColorClass)

    const spacingVal = 8 * (props.spacing === undefined ? 1 : props.spacing)

    const borderWidthStyle: CSSProperties = { borderWidth: props.hideBar ? 0 : 1 }

    const spacingStyle: CSSProperties = props.vertical
        ? { marginLeft: spacingVal, marginRight: spacingVal }
        : { marginTop: spacingVal, marginBottom: spacingVal }

    const style = { ...spacingStyle, ...props.style, ...borderWidthStyle }

    return (
        <div className={className} style={style}>
            {props.children}
        </div>
    )
}
